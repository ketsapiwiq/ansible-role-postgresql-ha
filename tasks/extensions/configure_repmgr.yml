---
- name: Repmgr | Update configuration (repmgr.conf)
  template:
    src: "repmgr.conf-{{ repmgr_version }}.j2"
    dest: "{{ postgresql_conf_directory }}/repmgr.conf"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0640
  notify: restart repmgr

- name: Repmgr | Upload logrotate configuration
  template:
    src: repmgr_logrotate.j2
    dest: /etc/logrotate.d/repmgr
    mode: 0640

- name: Repmgr | Create repmgr.conf symlink for shorter commands # see: https://repmgr.org/docs/5.0/configuration-file.html
  file:
    src: "{{ postgresql_conf_directory }}/repmgr.conf"
    dest: /etc/repmgr.conf 
    state: link
    mode: 0640
  ignore_errors: yes

- name: Repmgr | Ensure systemd drop-in directory exists
  file:
    path: "/etc/systemd/system/repmgr{{ postgresql_version }}.service.d/"
    state: directory
    mode: 0755

- name: Repmgr | Update drop-in
  template:
    src: "repmgr.custom.conf.j2"
    dest: "/etc/systemd/system/repmgr{{ postgresql_version }}.service.d/custom.conf"
    mode: 0640

# - name: Repmgr | Allow passwordless restarts with postgres user
#   template:
#     src: "sudoers.postgresql.j2"
#     dest: "/etc/sudoers.d/postgresql"
#     mode: 0640

- name: Repmgr | Update .pgpass for postgres user
  template:
    src: "pgpass.j2"
    dest: "{{ repmgr_passfile }}"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0600
    trim_blocks: no
  no_log: yes

- name: Repmgr | Ensure ssh keys destination folder exists
  file: 
    path: "{{ repmgr_base_key_path }}"
    state: directory
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0700
  register: check_ssh_keys

- name: Repmgr | Setup passwordless SSH access
  block: 
    - name: Rempgr | Generate local SSH keypair (Native module version)
      openssh_keypair:
        path: /tmp/postgres_id_rsa
        size: "{{ repmgr_ssh_key_bits }}"
        type: "{{ repmgr_ssh_key_type }}"
        owner: root
        mode: 0775
        force: yes
      delegate_to: 127.0.0.1

    - name: Repmgr | Fetch pubkey content
      set_fact:
        pubkey_content: "{{ lookup('file', '/tmp/postgres_id_rsa.pub') }}"
      become: yes

    - name: Repmgr | Update authorized_keys on all nodes
      authorized_key:
        user: "{{ postgresql_service_user }}"
        key: "{{ pubkey_content }}"
        state: present

    - name: Repmgr | Upload private key on all nodes
      copy:
        src: /tmp/postgres_id_rsa
        dest: "{{ repmgr_private_key_path }}"
        owner: "{{ postgresql_service_user }}"
        group: "{{ postgresql_service_group }}"
        mode: 0600
  when:
  - check_ssh_keys.changed or repmgr_ssh_force_renewal
  - repmgr_setup_ssh or repmgr_barman_host or repmgr_barman_server

- name: Repmgr | Setup SSH config for Barman
  template:
    src: repmgr_barman_ssh_config.j2
    dest: "{{ repmgr_base_key_path }}/config"
    owner: "{{ postgresql_service_user }}"
    group: "{{ postgresql_service_group }}"
    mode: 0600
  when: repmgr_barman_host and repmgr_barman_server

# WARNING: ansible_hostname will be AnsibleUndefined on all not current nodes, to avoid this you can either specify this var in inventory or execute the role on all nodes at the same time
- name: Determine repmgr primary hostname
  set_fact:
    repmgr_primary_hostname: "{% for host, vars in hostvars.items() if 'repmgr_primary' in vars and vars['repmgr_primary'] %}{{ hostvars[host]['ansible_hostname'] |trim }}{% endfor %}"
  failed_when: repmgr_primary_hostname == ''

- name: Debug repmgr primary hostname
  debug:
    msg:
      "repmgr_primary_hostname": "{{ repmgr_primary_hostname }}"
      "ansible_hostname": "{{ ansible_hostname }}"
      "Match?": "{{ repmgr_primary_hostname == ansible_hostname }}"

- name: Repmgr | Register as primary
  command: "repmgr primary register -F"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_hostname == repmgr_primary_hostname

# FIXME: when the role falsely detects it's a standby server, it will stop the primary server
# TODO: detect cloning will work before really stopping and cloning?

- name: Repmgr | Ensure postgresql standby is stopped before clone
  shell: 
    cmd: pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} stop
    executable: /bin/bash
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_hostname != repmgr_primary_hostname

- name: Repmgr | Clone standby
  command: "repmgr -F -h {{ repmgr_primary_hostname }} -U repmgr -d repmgr standby clone"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_hostname != repmgr_primary_hostname

- name: Repmgr | Ensure postgresql standby is running after clone
  shell: 
    cmd: pg_ctlcluster {{ postgresql_version }} {{ postgresql_cluster_name }} start
    executable: /bin/bash
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_hostname != repmgr_primary_hostname

- name: Repmgr | Wait for Postgres
  wait_for:
    timeout: 3
  delegate_to: localhost
  become: no

- name: Repmgr | Register standby
  command: "repmgr -F -h {{ repmgr_primary_hostname }} -U repmgr -d repmgr standby register"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  when: ansible_hostname != repmgr_primary_hostname

- name: Repmgr | Verify cluster functionality
  command: "repmgr -F -h {{ repmgr_primary_hostname }} -U repmgr -d repmgr cluster crosscheck"
  become: yes
  become_user: "{{ postgresql_service_user }}"
  ignore_errors: "{{ not repmgr_setup_ssh }}"
  register: repmgr_crosscheck

- name: Repmgr | Verify cluster functionality
  command: "repmgr -F -h {{ repmgr_primary_hostname }} -U repmgr -d repmgr cluster check"
  become: yes
  when: repmgr_crosscheck.rc != 0
  become_user: "{{ postgresql_service_user }}"

- name: Repmgr | Ensure repmgrd is running
  command: "/usr/bin/repmgrd daemon start"
  when: repmgr_monitoring_history or repmgr_failover == 'automatic'
  become: yes
  become_user: "{{ postgresql_service_user }}"

- name: Repmgr | Show repmgrd status
  command: "repmgr daemon status"
  register: repmgrd_status
  when: repmgr_monitoring_history or repmgr_failover == 'automatic'
  become: yes
  become_user: "{{ postgresql_service_user }}"
  check_mode: no
  ignore_errors: "{{ ansible_check_mode }}"

- name: Debug repmgrd status
  debug:
    msg:
      "{{ repmgrd_status.stdout_lines }}"
  ignore_errors: "{{ ansible_check_mode }}"

- name: Repmgr | Setup cluster monitoring history cleanup with cron task
  cron:
    name: Purges repmgr.monitoring_history table
    job: "repmgr cluster cleanup --keep-history={{ repmgr_keep_history_days }}"
    special_time: daily
  when: repmgr_monitoring_history and repmgr_failover == 'automatic'
